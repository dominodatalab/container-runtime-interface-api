version: 2.1

orbs:
  cri-api:
    executors:
      python_3_10:
        docker:
          - image: cimg/python:3.10
      python_3_9:
        docker:
          - image: cimg/python:3.9
      python_3_8:
        docker:
          - image: cimg/python:3.8
    jobs:
      lint:
        parameters:
          python-version:
            type: string
        executor: python_<< parameters.python-version >>
        steps:
          - checkout
          - run:
              name: Install pip dependencies
              command: pipenv install --dev --deploy --python=$(which python)
          - run:
              name: Ensure code is correctly formatted
              command: pipenv run black --check .
          - run:
              name: Ensure code is correctly typed
              command: pipenv run mypy .
      unit-tests:
        parameters:
          python-version:
            type: string
        executor: python_<< parameters.python-version >>
        steps:
          - checkout
          - run:
              name: Install pip dependencies
              command: pipenv install --dev --deploy --python=$(which python)
          - run:
              name: Run unit tests
              command: pipenv run pytest --junitxml=./tests/reports/junit-test-report.xml
          - store_test_results:
              path: tests/reports
      publish:
        parameters:
          python-version:
            type: string
        executor: python_<< parameters.python-version >>
        steps:
          - checkout
          - run:
              name: Install pip dependencies
              command: pipenv install --dev --deploy --python=$(which python)
          - run:
              name: Create distributions
              command: |
                pipenv run python setup.py sdist
                pipenv run python setup.py bdist_wheel
          - run:
              name: Publish distributions
              command: |
                pipenv run twine upload dist/*
      integration-tests:
        machine:
          image: ubuntu-2004:2022.10.1
        environment:
          K8S_VERSION: v1.25.5
          CRI_DOCKERD_VERSION: 0.2.6
          CRICTL_VERSION: v1.25.0
        steps:
          - checkout
          - run:
              name: Install pip dependencies
              command: |
                pip3 install pipenv
                pipenv install --dev --deploy --python=$(which python3)
          - run:
              name: Setup system prereqs
              command: |
                curl -sSfL https://github.com/kubernetes-sigs/cri-tools/releases/download/$CRICTL_VERSION/crictl-$CRICTL_VERSION-linux-amd64.tar.gz | sudo tar -C /usr/bin -xz
                chmod +x /usr/bin/crictl

                curl -sSfL -O https://github.com/Mirantis/cri-dockerd/releases/download/v$CRI_DOCKERD_VERSION/cri-dockerd_$CRI_DOCKERD_VERSION.3-0.ubuntu-focal_amd64.deb
                sudo dpkg -i cri*
          - run:
              name: Run tests against cri-dockerd
              command: |
                # Allow `circleci` user access
                sudo chmod 777 /var/run/cri-dockerd.sock

                # Naming convention to match K8s so that cri-dockerd parses it correctly (naming.go)
                sudo docker run -l io.kubernetes.docker.type=container --name k8s_podname_containername_namespace_uid_0 busybox echo Hi

                export RUNTIME_SOCK=unix:/var/run/cri-dockerd.sock
                pipenv run pytest --junitxml=./tests/reports/junit-test-report.xml
          - run:
              name: Run tests against containerd
              command: |
                # Reset containerd config to default. Docker disables `cri` plugin by default.
                sudo truncate -s0 /etc/containerd/config.toml
                sudo systemctl restart containerd
                # Allow `circleci` user access
                sudo chmod 777 /var/run/containerd/containerd.sock

                # Setup CNI
                containerd_version=$(containerd --version | cut -d ' ' -f 3,3)
                curl -sSfL https://github.com/containerd/containerd/releases/download/v$containerd_version/cri-containerd-cni-$containerd_version-linux-amd64.tar.gz | \
                  sudo tar -C / -xz etc/cni/ etc/crictl.yaml opt/cni/

                # Create a CRI pod & container
                sudo crictl pull busybox
                sudo crictl create $(sudo crictl runp tests/fixtures/sandbox-config.json) tests/fixtures/container-config.json tests/fixtures/sandbox-config.json

                export RUNTIME_SOCK=unix:/var/run/containerd/containerd.sock
                pipenv run pytest --junitxml=./tests/reports/junit-test-report.xml
          - store_test_results:
              path: tests/reports

workflows:
  unit-build-publish:
    jobs:
      - cri-api/unit-tests:
          matrix:
            parameters:
              python-version: ["3_8", "3_9", "3_10"]
          filters:
            tags:
              only: /.*/
      - cri-api/lint:
          python-version: &default_python "3_9"
          filters:
            tags:
              only: /.*/
      - cri-api/integration-tests:
          filters:
            tags:
              only: /.*/
          requires:
            - cri-api/unit-tests
            - cri-api/lint
      - cri-api/publish:
          python-version: *default_python
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - cri-api/integration-tests
